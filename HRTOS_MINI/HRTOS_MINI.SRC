; .\HRTOS_MINI.SRC generated from: ..\HRTOS_MINI.c
; COMPILER INVOKED BY:
;        F:\C51\BIN\C51.EXE ..\HRTOS_MINI.c DEBUG OBJECTEXTEND SRC(.\HRTOS_MINI.SRC)

$NOMOD51

NAME	HRTOS_MINI

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?timer0_isr?HRTOS_MINI                SEGMENT CODE 
?PR?os_init?HRTOS_MINI                   SEGMENT CODE 
?PR?_os_task?HRTOS_MINI                  SEGMENT CODE 
?DT?_os_task?HRTOS_MINI                  SEGMENT DATA OVERLAYABLE 
?PR?os_start?HRTOS_MINI                  SEGMENT CODE 
?CO?HRTOS_MINI       SEGMENT CODE 
?DT?HRTOS_MINI       SEGMENT DATA 
?BI?HRTOS_MINI       SEGMENT BIT 
	EXTRN	CODE (os_enter_critical)
	EXTRN	CODE (os_exit_critical)
	PUBLIC	os_tcb
	PUBLIC	os_task_stack
	PUBLIC	os_hrtos_stack
	PUBLIC	os_stack
	PUBLIC	os_en_cr_count
	PUBLIC	os_task_rdy_tbl
	PUBLIC	os_hrtos_wait
	PUBLIC	os_task_running_id
	PUBLIC	os_map_tbl
	PUBLIC	os_start
	PUBLIC	_os_task
	PUBLIC	os_init
	PUBLIC	timer0_isr

	RSEG  ?DT?_os_task?HRTOS_MINI
?_os_task?BYTE:
    task_id?242:   DS   1
	ORG  1
 task_point?243:   DS   2

	RSEG  ?DT?HRTOS_MINI
os_task_running_id:   DS   1
os_task_rdy_tbl:   DS   1
 os_en_cr_count:   DS   1
       os_stack:   DS   1
 os_hrtos_stack:   DS   26
  os_task_stack:   DS   40
         os_tcb:   DS   10

	RSEG  ?BI?HRTOS_MINI
  os_hrtos_wait:   DBIT   1

	RSEG  ?CO?HRTOS_MINI
os_map_tbl:
	DB	001H
	DB	002H
	DB	004H
	DB	008H
	DB	010H
	DB	020H
	DB	040H
	DB	080H

; #include <reg52.h>
; #include<hrtos_mini.h>
; #define OS_ST 9	  //保存的堆栈数
; unsigned char os_en_cr_count;
; unsigned char code os_map_tbl[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
; TCB os_tcb[MAX_TASKS];
; unsigned char os_task_running_id;//当前运行的任务号
; unsigned char os_task_rdy_tbl;//任务状态
; unsigned char  os_task_stack[MAX_TASKS][8];//任务堆栈区
; unsigned char os_hrtos_stack[26];//HRTOS堆栈区
; unsigned char os_stack;//堆栈初始值
; bit os_hrtos_wait;
CSEG	AT	0000BH
	LJMP	timer0_isr

; void timer0_isr(void) interrupt 1

	RSEG  ?PR?timer0_isr?HRTOS_MINI
	USING	0
timer0_isr:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	MOV  	PSW,#00H
	PUSH 	AR0
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	USING	0
			; SOURCE LINE # 13
;---- Variable 'i?040' assigned to Register 'R7' ----
;---- Variable 'j?041' assigned to Register 'R6' ----
; {
;     unsigned char i,j;
;     TF0=0;
			; SOURCE LINE # 16
	CLR  	TF0
; 	if(os_task_running_id==MAX_TASKS)
			; SOURCE LINE # 17
	MOV  	A,os_task_running_id
	CJNE 	A,#05H,?C0001
; 	{
			; SOURCE LINE # 18
; 		ET0=0;
			; SOURCE LINE # 19
	CLR  	ET0
; 		i=0;
			; SOURCE LINE # 20
	MOV  	R7,#00H
; 		goto OS_HRT;
			; SOURCE LINE # 21
	SJMP 	?timer0_isr?OS_HRT
; 	}
			; SOURCE LINE # 22
?C0001:
;     os_tcb[os_task_running_id].os_task_stack_top=SP;
			; SOURCE LINE # 23
	MOV  	A,os_task_running_id
	ADD  	A,ACC
	ADD  	A,#LOW (os_tcb+01H)
	MOV  	R0,A
	MOV  	@R0,SP
;     j= SP-OS_ST-os_stack;
			; SOURCE LINE # 24
	MOV  	A,SP
	ADD  	A,#0F7H
	CLR  	C
	SUBB 	A,os_stack
	MOV  	R6,A
;     if(os_hrtos_wait)
			; SOURCE LINE # 25
	JNB  	os_hrtos_wait,?C0003
;     {
			; SOURCE LINE # 26
;         for(i=0; i<MAX_TASKS; i++)
			; SOURCE LINE # 27
	MOV  	R7,#00H
?C0004:
;         {
			; SOURCE LINE # 28
;             if(os_tcb[i].os_task_wait_tick)
			; SOURCE LINE # 29
	MOV  	A,R7
	ADD  	A,ACC
	ADD  	A,#LOW (os_tcb)
	MOV  	R0,A
	MOV  	A,@R0
	JZ   	?C0006
;             {
			; SOURCE LINE # 30
;                 os_tcb[i].os_task_wait_tick--;
			; SOURCE LINE # 31
	DEC  	@R0
;                 if(os_tcb[i].os_task_wait_tick == 0)
			; SOURCE LINE # 32
	MOV  	A,@R0
	JNZ  	?C0006
;                 {
			; SOURCE LINE # 33
;                     os_task_rdy_tbl |= os_map_tbl[i];
			; SOURCE LINE # 34
	MOV  	A,R7
	MOV  	DPTR,#os_map_tbl
	MOVC 	A,@A+DPTR
	ORL  	os_task_rdy_tbl,A
;                 }
			; SOURCE LINE # 35
;             }
			; SOURCE LINE # 36
;         }
			; SOURCE LINE # 37
?C0006:
	INC  	R7
	CJNE 	R7,#05H,?C0004
	SJMP 	?C0009
;     }
			; SOURCE LINE # 38
?C0003:
;     else { os_hrtos_wait=1; }
			; SOURCE LINE # 39
	SETB 	os_hrtos_wait
?C0009:
;     for(i=0; i<j; i++)   //保护
			; SOURCE LINE # 40
	MOV  	R7,#00H
?C0010:
	MOV  	A,R7
	CLR  	C
	SUBB 	A,R6
	JNC  	?C0011
;     {
			; SOURCE LINE # 41
;         os_task_stack[os_task_running_id][i]=os_hrtos_stack[i];
			; SOURCE LINE # 42
	MOV  	A,#LOW (os_hrtos_stack)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R5,A
	MOV  	A,os_task_running_id
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (os_task_stack)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,AR5
;     }
			; SOURCE LINE # 43
	INC  	R7
	SJMP 	?C0010
?C0011:
;     for (i=os_task_running_id+1; i<MAX_TASKS; i++)//筛选
			; SOURCE LINE # 44
	MOV  	A,os_task_running_id
	INC  	A
	MOV  	R7,A
?C0013:
	MOV  	A,R7
	CLR  	C
	SUBB 	A,#05H
	JNC  	?C0014
;     {
			; SOURCE LINE # 45
;         if(os_task_rdy_tbl&os_map_tbl[i])
			; SOURCE LINE # 46
	MOV  	A,R7
	MOV  	DPTR,#os_map_tbl
	MOVC 	A,@A+DPTR
	ANL  	A,os_task_rdy_tbl
	JNZ  	?C0014
;         {
			; SOURCE LINE # 47
;             break;
			; SOURCE LINE # 48
;         }
			; SOURCE LINE # 49
?C0016:
;     }
			; SOURCE LINE # 50
?C0015:
	INC  	R7
	SJMP 	?C0013
?C0014:
;     if(i==MAX_TASKS)
			; SOURCE LINE # 51
	CJNE 	R7,#05H,?timer0_isr?OS_HRT
;     {
			; SOURCE LINE # 52
;  		for (i=0; i<=os_task_running_id; i++)
			; SOURCE LINE # 53
	MOV  	R7,#00H
?C0018:
	MOV  	A,R7
	SETB 	C
	SUBB 	A,os_task_running_id
	JNC  	?timer0_isr?OS_HRT
;         {
			; SOURCE LINE # 54
;             if(os_task_rdy_tbl&os_map_tbl[i])
			; SOURCE LINE # 55
	MOV  	A,R7
	MOV  	DPTR,#os_map_tbl
	MOVC 	A,@A+DPTR
	ANL  	A,os_task_rdy_tbl
	JNZ  	?timer0_isr?OS_HRT
;             {
			; SOURCE LINE # 56
;                 break;
			; SOURCE LINE # 57
;             }
			; SOURCE LINE # 58
?C0021:
;         }
			; SOURCE LINE # 59
?C0020:
	INC  	R7
	SJMP 	?C0018
;     }
			; SOURCE LINE # 60
; OS_HRT:
			; SOURCE LINE # 61
?timer0_isr?OS_HRT:
; 	os_task_running_id = i;//选择
			; SOURCE LINE # 62
	MOV  	os_task_running_id,R7
;     j= os_tcb[os_task_running_id].os_task_stack_top-OS_ST-os_stack;
			; SOURCE LINE # 63
	MOV  	A,R7
	ADD  	A,ACC
	ADD  	A,#LOW (os_tcb+01H)
	MOV  	R0,A
	MOV  	A,@R0
	ADD  	A,#0F7H
	CLR  	C
	SUBB 	A,os_stack
	MOV  	R6,A
;     for(i=0; i<j; i++)   //恢复
			; SOURCE LINE # 64
	MOV  	R7,#00H
?C0022:
	MOV  	A,R7
	CLR  	C
	SUBB 	A,R6
	JNC  	?C0023
;     {
			; SOURCE LINE # 65
;         os_hrtos_stack[i]=os_task_stack[os_task_running_id][i];
			; SOURCE LINE # 66
	MOV  	A,os_task_running_id
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (os_task_stack)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R5,A
	MOV  	A,#LOW (os_hrtos_stack)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,AR5
;     }
			; SOURCE LINE # 67
	INC  	R7
	SJMP 	?C0022
?C0023:
;     SP = os_tcb[os_task_running_id].os_task_stack_top;
			; SOURCE LINE # 68
	MOV  	A,os_task_running_id
	ADD  	A,ACC
	ADD  	A,#LOW (os_tcb+01H)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	SP,A
; }
			; SOURCE LINE # 69
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR0
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF timer0_isr

; void os_init(void)

	RSEG  ?PR?os_init?HRTOS_MINI
os_init:
			; SOURCE LINE # 70
; {
			; SOURCE LINE # 71
;     EA = 0;
			; SOURCE LINE # 72
	CLR  	EA
;     ET0 = 1;
			; SOURCE LINE # 73
	SETB 	ET0
;     TMOD|=0X01;
			; SOURCE LINE # 74
	ORL  	TMOD,#01H
;     TH0 = 0x00;
			; SOURCE LINE # 75
	CLR  	A
	MOV  	TH0,A
;     TL0 = 0x00;
			; SOURCE LINE # 76
	MOV  	TL0,A
;     os_task_rdy_tbl = 0;
			; SOURCE LINE # 77
	MOV  	os_task_rdy_tbl,A
;     os_stack=(unsigned char)os_hrtos_stack;
			; SOURCE LINE # 78
	MOV  	os_stack,#LOW (os_hrtos_stack)
; 	os_stack--;
			; SOURCE LINE # 79
	DEC  	os_stack
;     os_hrtos_wait=1;
			; SOURCE LINE # 80
	SETB 	os_hrtos_wait
;     os_en_cr_count = 0;
			; SOURCE LINE # 81
	MOV  	os_en_cr_count,A
; }
			; SOURCE LINE # 82
	RET  	
; END OF os_init

; void os_task(unsigned char task_id ,unsigned int task_point)

	RSEG  ?PR?_os_task?HRTOS_MINI
_os_task:
	USING	0
			; SOURCE LINE # 83
	MOV  	task_id?242,R7
	MOV  	task_point?243,R4
	MOV  	task_point?243+01H,R5
; {
			; SOURCE LINE # 84
;     os_enter_critical();
			; SOURCE LINE # 85
	LCALL	os_enter_critical
;     os_task_stack[task_id][0] = task_point;//地址
			; SOURCE LINE # 86
	MOV  	A,task_id?242
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (os_task_stack)
	MOV  	R0,A
	MOV  	@R0,task_point?243+01H
;     os_task_stack[task_id][1] = task_point>>8;
			; SOURCE LINE # 87
	MOV  	A,task_point?243
	MOV  	R7,A
	MOV  	A,task_id?242
	MOV  	B,#08H
	MUL  	AB
	ADD  	A,#LOW (os_task_stack+01H)
	MOV  	R0,A
	MOV  	@R0,AR7
;     os_tcb[task_id].os_task_stack_top = os_stack+11;
			; SOURCE LINE # 88
	MOV  	A,os_stack
	ADD  	A,#0BH
	MOV  	R7,A
	MOV  	A,task_id?242
	ADD  	A,ACC
	ADD  	A,#LOW (os_tcb+01H)
	MOV  	R0,A
	MOV  	@R0,AR7
;     os_task_rdy_tbl |= os_map_tbl[task_id];//生效
			; SOURCE LINE # 89
	MOV  	A,task_id?242
	MOV  	DPTR,#os_map_tbl
	MOVC 	A,@A+DPTR
	ORL  	os_task_rdy_tbl,A
;     os_tcb[task_id].os_task_wait_tick = 0; //延时
			; SOURCE LINE # 90
	MOV  	A,task_id?242
	ADD  	A,ACC
	ADD  	A,#LOW (os_tcb)
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
;     os_exit_critical();
			; SOURCE LINE # 91
	LJMP 	os_exit_critical
; END OF _os_task

; }
; void os_start(void)

	RSEG  ?PR?os_start?HRTOS_MINI
os_start:
			; SOURCE LINE # 93
; {
			; SOURCE LINE # 94
;     os_task_running_id = MAX_TASKS;
			; SOURCE LINE # 95
	MOV  	os_task_running_id,#05H
;     os_hrtos_stack[0]=os_task_stack[0][0];
			; SOURCE LINE # 96
	MOV  	os_hrtos_stack,os_task_stack
;     os_hrtos_stack[1]=os_task_stack[0][1];
			; SOURCE LINE # 97
	MOV  	os_hrtos_stack+01H,os_task_stack+01H
;     EA = 1;
			; SOURCE LINE # 98
	SETB 	EA
;     TR0 = 1;
			; SOURCE LINE # 99
	SETB 	TR0
; }
			; SOURCE LINE # 100
	RET  	
; END OF os_start

	END
